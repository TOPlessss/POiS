#lang racket
(display "Задание 1\n")
(define firstList (list 0 2 3 4 5))
(define secondList (list 6 7 8 9 10))
(define (checkFirstArg arg)
  (cond ((and (= (remainder arg 1) 0) (> arg 0)) (list secondList))
  (else (append secondList firstList))))

(display (checkFirstArg (first firstList)))

(display "\nЗадание 7\n")
(define myList (list 1 2 3 4 5 6 "ex" 8))
(define (perf myList)
  (cond ((and (number? (first myList)) (number? (third myList))
             (number? (seventh myList)))
        (+ (first myList) (third myList) (seventh myList)))
        (else  (last myList))
  )
)
(display (perf myList))

(display "\nЗадание 13\n")
(define a(read))
(define b(read))
(define c(read))
(define (makeList a b c)
  ( cond ((= (remainder (* a b c) 2) 1)
         (list (* a a a) (* b b b) (* c c c))
         )
         (else (+ a b c))
        )
  
)
(display (makeList a b c))